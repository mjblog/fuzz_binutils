commit 41bc642e1e2ed9c512dd6396179108158d78a92b
Author: 马江10100629 <ma.jiang@zte.com.cn>
Date:   Fri Oct 19 18:56:45 2018 +0800

    cgo first edtion

diff --git a/src/cmd/link/internal/ppc64/asm.go b/src/cmd/link/internal/ppc64/asm.go
index 3e833b6..497e350 100644
--- a/src/cmd/link/internal/ppc64/asm.go
+++ b/src/cmd/link/internal/ppc64/asm.go
@@ -374,6 +374,12 @@ func adddynrel(ctxt *ld.Link, s *sym.Symbol, r *sym.Reloc) bool {
 }
 
 func elfreloc1(ctxt *ld.Link, r *sym.Reloc, sectoff int64) bool {
+	if r.Type == objabi.R_ADDR || r.Type == objabi.R_POWER_TLS ||  r.Type == objabi.R_CALLPOWER {
+    }else{
+		if ctxt.Arch.ByteOrder == binary.BigEndian {
+			sectoff += 2
+		}
+	}
 	ctxt.Out.Write64(uint64(sectoff))
 
 	elfsym := r.Xsym.ElfsymForReloc()
diff --git a/src/cmd/link/internal/ppc64/obj.go b/src/cmd/link/internal/ppc64/obj.go
index 273d9b4..a0150ed 100644
--- a/src/cmd/link/internal/ppc64/obj.go
+++ b/src/cmd/link/internal/ppc64/obj.go
@@ -94,7 +94,7 @@ func archinit(ctxt *ld.Link) {
 
 	case objabi.Hlinux: /* ppc64 elf */
 		if ctxt.Arch == sys.ArchPPC64 {
-			*ld.FlagD = true // TODO(austin): ELF ABI v1 not supported yet
+			*ld.FlagD = false // TODO(austin): ELF ABI v1 not supported yet
 		}
 		ld.Elfinit(ctxt)
 		ld.HEADR = ld.ELFRESERVE
diff --git a/src/runtime/asm_ppc64x.s b/src/runtime/asm_ppc64x.s
index b180cb0..4392461 100644
--- a/src/runtime/asm_ppc64x.s
+++ b/src/runtime/asm_ppc64x.s
@@ -36,6 +36,10 @@ TEXT runtime·rt0_go(SB),NOSPLIT,$0
 	MOVD	_cgo_init(SB), R12
 	CMP	R0, R12
 	BEQ	nocgo
+#ifndef GOARCH_ppc64le
+	MOVD	8(R12), R2
+	MOVD	(R12), R12
+#endif
 	MOVD	R12, CTR		// r12 = "global function entry point"
 	MOVD	R13, R5			// arg 2: TLS base pointer
 	MOVD	$setg_gcc<>(SB), R4 	// arg 1: setg
@@ -564,6 +568,11 @@ g0:
 	MOVD	R0, 0(R1)	// clear back chain pointer (TODO can we give it real back trace information?)
 	// This is a "global call", so put the global entry point in r12
 	MOVD	R3, R12
+	
+#ifdef GOARCH_ppc64
+	MOVD    8(R12), R2
+	MOVD	(R12), R12
+#endif	
 	MOVD	R12, CTR
 	MOVD	R4, R3		// arg in r3
 	BL	(CTR)
@@ -722,9 +731,21 @@ TEXT runtime·setg(SB), NOSPLIT, $0-8
 	BL	runtime·save_g(SB)
 	RET
 
+#ifndef GOARCH_ppc64le
+// function descriptor for the real sigtramp
+TEXT setg_gcc<>(SB),NOSPLIT|NOFRAME,$0-0
+    DWORD   $_setg_gcc<>(SB)
+    DWORD   $0
+    DWORD   $0
+#endif
+
 // void setg_gcc(G*); set g in C TLS.
 // Must obey the gcc calling convention.
+#ifdef GOARCH_ppc64le
 TEXT setg_gcc<>(SB),NOSPLIT|NOFRAME,$0-0
+#else
+TEXT _setg_gcc<>(SB),NOSPLIT|NOFRAME,$0-0
+#endif
 	// The standard prologue clobbers R31, which is callee-save in
 	// the C ABI, so we have to use $-8-0 and save LR ourselves.
 	MOVD	LR, R4
diff --git a/src/runtime/rt0_linux_ppc64.s b/src/runtime/rt0_linux_ppc64.s
index f814515..1c05623 100644
--- a/src/runtime/rt0_linux_ppc64.s
+++ b/src/runtime/rt0_linux_ppc64.s
@@ -6,18 +6,25 @@ TEXT _rt0_ppc64_linux(SB),NOSPLIT,$0
 	DWORD $0
 	DWORD $0
 
+TEXT main(SB),NOSPLIT,$0
+	DWORD $_main<>(SB)
+	DWORD $0
+	DWORD $0
+
 TEXT _main<>(SB),NOSPLIT,$-8
 	// In a statically linked binary, the stack contains argc,
 	// argv as argc string pointers followed by a NULL, envv as a
 	// sequence of string pointers followed by a NULL, and auxv.
 	// There is no TLS base pointer.
 	//
-	// TODO(austin): Support ABI v1 dynamic linking entry point
-	MOVD 0(R1), R3 // argc
-	ADD $8, R1, R4 // argv
-	BR main(SB)
-
-TEXT main(SB),NOSPLIT,$-8
+	// TODO(austin): Support ABI v1 dynamic linking entry point	
 	MOVD	$runtime·rt0_go(SB), R12
 	MOVD	R12, CTR
+	MOVD	_cgo_init(SB), R5
+	CMP	R0, R5
+	BEQ	nocgo
+	BR	(CTR)	
+nocgo:
+	MOVD 0(R1), R3 // argc
+	ADD $8, R1, R4 // argv
 	BR	(CTR)
diff --git a/src/runtime/sys_linux_ppc64x.s b/src/runtime/sys_linux_ppc64x.s
index 5b5df50..8100146 100644
--- a/src/runtime/sys_linux_ppc64x.s
+++ b/src/runtime/sys_linux_ppc64x.s
@@ -414,7 +414,7 @@ TEXT runtime·cgoSigtramp(SB),NOSPLIT|NOFRAME,$0
 	DWORD	$0
 	DWORD	$0
 TEXT runtime·_cgoSigtramp(SB),NOSPLIT,$0
-	JMP	runtime·sigtramp(SB)
+	JMP	runtime·_sigtramp(SB)
 #endif
 
 TEXT runtime·sigprofNonGoWrapper<>(SB),NOSPLIT,$0
